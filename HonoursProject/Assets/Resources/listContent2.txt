A stack is a data structure that follows the Last-In-First-Out (LIFO) principle, which means that the last element added to the stack is the first element to be removed.
The operations commonly associated with a stack are push (add an element to the top of the stack) and pop (remove the top element from the stack). A linked list can be used as the underlying data structure for a stack.
To implement a Stack using a linked list, we must define a Node class like we previously saw that contains a data element and a pointer to the next Node in the list, and define a Stack class that contains a pointer to the top Node in the list.
/Next, the push operation can be defined by creating a new Node and setting its next pointer to the current top Node. Then, we can update the top pointer value to the newest Node.
/The pop operation can be defined by removing the top Node and updating the top pointer to the next Node in the list.
It is important to check if the stack is empty before popping or pushing an element. If the stack is empty, then the top pointer will be null and attempting to access it may cause an exception.