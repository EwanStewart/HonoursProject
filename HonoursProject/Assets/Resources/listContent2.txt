A stack is a data structure that follows the Last-In-First-Out (LIFO) principle, which means that the last element added to the stack is the first element to be removed.
The operations commonly associated with a stack are push (add an element to the top of the stack) and pop (remove the top element from the stack). A linked list can be used as the underlying data structure for a stack.
To implement a Stack using a linked list, we must define a Node class like we previously saw that contains a data element and a pointer to the next Node in the list, and define a Stack class that contains a pointer to the top Node in the list.
/Next, the push operation can be defined by creating a new Node and setting its next pointer to the current top Node. Then, we can update the top pointer value to the newest Node.
/The pop operation can be defined by removing the top Node and updating the top pointer to the next Node in the list.
It is important to check if the stack is empty before popping or pushing an element. If the stack is empty, then the top pointer will be null and attempting to access it may cause an exception.
A queue is a data structure that follows the First-In-First-Out (FIFO) principle, which means that the first element added to the queue is the first element to be removed.
The operations commonly associated with a queue are enqueue (add an element to the back of the queue) and dequeue (remove the front element from the queue).
A linked list can be used as the underlying data structure for a queue.
To implement a queue using a linked list, we must define a node class and a queue class that contains pointers to the front and back of the queue.
/Next, the enqueue operation can be implemented by creating a new node and setting its next value to null. Then get the current last node and set its next value to the new node. Finally, set the modified pointer to the new node.
/The dequeue operation can be implemented by getting the first node pointer value and updating it to the next node in the list. The original first node can then be removed from the list.
Like in Stacks, it is important to check if the queue is empty before performing any operations on it.
Let's finalise our understanding of linked lists by looking playing a final game.